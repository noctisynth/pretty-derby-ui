use tokio::sync::Mutex;

use chrono::NaiveDateTime;
use pretty_derby::Account;
use serde_json::{json, Value};
use tauri::State;

const GEO_JSON: &str = r#"{"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"coordinates":[[104.18111684682418,30.82931170793215],[104.1811649700536,30.829541937537684],[104.18127582506548,30.82976257391917],[104.18126207557117,30.829859978361995],[104.18119934331162,30.830061428340997],[104.18120278068562,30.83016547366833],[104.18124918523279,30.83031969700251],[104.18134629103372,30.83042079041921],[104.1815089746828,30.830519392289844],[104.18155537922433,30.83065221545894],[104.18158696143507,30.8307817228622],[104.18167289577184,30.830845920574788],[104.1817978988758,30.83088565874857],[104.18187352109209,30.830952808006145],[104.18218898001862,30.83092019771874],[104.18250554612564,30.83089620272878],[104.18261562051333,30.830889539303243],[104.18269468010362,30.8310850837063],[104.1827604795132,30.83115555904152],[104.182634156039,30.83130830465828],[104.182788842018,30.83144997822602],[104.18288508847655,30.831609364461485],[104.18295770704071,30.831735938164755],[104.18298864340176,30.831814893181345],[104.183337897238,30.83190716478599],[104.18343414369497,30.83198685755724],[104.18341695660706,30.832298987101836],[104.1833415346083,30.832438781160647],[104.18299521922978,30.832590786844065],[104.18308055830323,30.832914670305072],[104.1831106353194,30.832992148689087],[104.1830472737899,30.83316581009241],[104.18283821235082,30.833283935415423],[104.18284997569015,30.833388399111243],[104.18310344914352,30.833550239692613],[104.1836507506149,30.833646400573713],[104.18373632498594,30.833569200868084],[104.18389771277282,30.833565991375963],[104.18407969371424,30.833664583764502],[104.18410785743038,30.833792009625398],[104.18398328642866,30.834047791225203],[104.18403528065136,30.834183587728234],[104.18412843756215,30.834267297714334],[104.18430391944827,30.83437612078825],[104.18435699722096,30.83456028229172],[104.18432341715271,30.83468584691181],[104.18414793553052,30.83479001878308],[104.18412410469256,30.834861636878344],[104.18429092055635,30.834907212002392],[104.18435266408937,30.83491930335863],[104.18438082741244,30.834963018306993],[104.18436132945465,30.835021614829387],[104.18408077550367,30.835018824519608],[104.1839204589611,30.83490907227089],[104.18394320657859,30.834794669370183],[104.18408510872797,30.834655153189857],[104.18414901870204,30.834623529554293],[104.18413168718337,30.834520287610943],[104.18399086859858,30.834423556319777],[104.18381756584859,30.834364959241796],[104.18378940213046,30.834282179451023],[104.1838110665293,30.834205910367572],[104.18386089464434,30.83415754457576],[104.18385336378884,30.834019932284775],[104.1838035356738,30.83389622718282],[104.18374179214084,30.833828328826243],[104.18360638965481,30.83384600100628],[104.18352623138253,30.833871114097775],[104.18329225562684,30.833813446797706],[104.18318610007759,30.83378275299893],[104.1830127848965,30.83377624219233],[104.18282504061557,30.833833462224064],[104.18261922883812,30.833847413944184],[104.18248815923027,30.833817650271726],[104.18234173509671,30.83369657240432],[104.18225074462703,30.83354124289353],[104.18224857818592,30.83340172515385],[104.18229840638406,30.833260346785835],[104.1823807310954,30.833182216648083],[104.18252263290071,30.833125479246263],[104.18258220999462,30.833038977897104],[104.18274902612967,30.83300828328032],[104.18286601387842,30.832866904518355],[104.18280274063727,30.832609068043595],[104.18282657147523,30.83249559252897],[104.1830164794668,30.832285425861997],[104.18300998014752,30.832194273102488],[104.18276069738903,30.832008246802772],[104.1826523753403,30.831859425476424],[104.18263829348126,30.831668747841533],[104.18255165997556,30.831484539169722],[104.18249208288165,30.831406407586556],[104.18244658773352,30.83126967726278],[104.18230901880645,30.831091090294066],[104.18169916614494,30.831137597363792],[104.1816764185275,30.831030631103843],[104.18131896363224,30.83093574450922],[104.18116406318848,30.830641818923837],[104.18102505211942,30.830374866203016],[104.18089831539373,30.830197207719337],[104.18091348074438,30.83001169802317],[104.1808853172409,30.829634055417472],[104.18090373207588,30.829315011396105],[104.18060870096554,30.82887528341479],[104.18054797581112,30.8285824698835],[104.18042185441425,30.82824152169873],[104.18042029735943,30.82805700794833],[104.18037358570069,30.82796073976357],[104.18067409766644,30.827516834765703],[104.18089519951332,30.827567643220988],[104.18086473066677,30.827842072929897],[104.18086843639782,30.828094768163382],[104.18080296825951,30.828198718485567],[104.18081827236693,30.82858240907595],[104.18088323209122,30.82883935125861],[104.18100675688277,30.82900163973983],[104.18111792901271,30.829211659856824],[104.18111663233623,30.829311682632024]],"type":"LineString"}}]}"#;

#[tauri::command]
async fn login(
    account: State<'_, Mutex<Account>>,
    username: &str,
    password: &str,
) -> Result<Value, ()> {
    let mut account = account.lock().await;
    if let Err(e) = account.login(username, password).await {
        return Ok(json!({"status": false, "msg": e.to_string(), "account": Value::Null}));
    };
    Ok(json!({"status": true, "msg": "Login successful!"}))
}

#[tauri::command]
async fn upload(
    account: State<'_, Mutex<Account>>,
    mileage: f64,
    time: String,
) -> Result<Value, ()> {
    println!("Uploading {} mileage at {}...", mileage, time);
    if let Err(e) = account
        .lock()
        .await
        .upload_running(
            GEO_JSON,
            mileage,
            match NaiveDateTime::parse_from_str(&time, "%Y/%m/%d %H:%M:%S") {
                Ok(t) => t,
                Err(e) => {
                    println!("Error when parsing: {}", e.to_string());
                    return Ok(json!({"status": false, "msg": e.to_string()}));
                }
            },
        )
        .await
    {
        println!("An error occurred: {}", e.to_string());
        return Ok(json!({"status": false, "msg": e.to_string()}));
    };
    Ok(json!({"status": true, "msg": "Running data uploaded successfully!"}))
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .setup(|app| {
            if cfg!(debug_assertions) {
                app.handle().plugin(
                    tauri_plugin_log::Builder::default()
                        .level(log::LevelFilter::Info)
                        .build(),
                )?;
            }
            Ok(())
        })
        .plugin(tauri_plugin_process::init())
        .plugin(tauri_plugin_shell::init())
        .invoke_handler(tauri::generate_handler![login, upload])
        .manage(Mutex::new(Account::new()))
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
